@page "/"
@using Clickxys.Models
@using static Clickxys.Models.GameConstans
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div>
    <h1>Bem vindo ao Clickxys</h1>
    <label>Clique para a vitória</label>
</div>

<div>
    <MudTextField T="string" @bind-Value=@DeveloperCode Placeholder="Insert developer code" OnBlur="@ValidateDeveloperCode"></MudTextField>
</div>

<div class="divCoins">
    <label>@CoinsBalance Coins</label>
</div>
<div class="divCheese" @onclick=@OnClickCheese>
    <MudImage Src="https://localhost:7046//images/cheese.png" Height="200" Width="200"></MudImage>
</div>

<div class="divUpgradeButtons">
    @if (HabilitaUpgradeClick)
    {
        <div>
            <MudButton @onclick=@UpgradeClick Disabled=@(CoinsBalance < PrecoMultiplicador)>Increase Multiplier | @StringPrecoMultiplicador</MudButton>
            <label>@StringMultiplicador</label>
        </div>
    }
    @if (HabilitaComprarMaquina)
    {
        <div>
            <MudButton @onclick=@ComprarMaquinaClick Disabled=@(CoinsBalance < PrecoMaquina)>Buy Machine | @PrecoMaquina</MudButton>
            <label>@QuantidadeMaquinas</label>
        </div>
    }
</div>

@code {

    public decimal CoinsBalance = 0;
    public decimal CountPontuacaoPassiva = 0;

    public int PrecoMultiplicador = PrecoInicialMultiplicador;
    public int MultiplicadorClicks = 1;

    public decimal PrecoMaquina = PrecoInicialMaquina;
    public int QuantidadeMaquinas = 0;
    public decimal GanhoPassivoMaquina = 100;

    public bool HabilitaUpgradeClick = false;
    public bool HabilitaComprarMaquina = false;

    private string StringMultiplicador => $"Multiplicador Atual: {MultiplicadorClicks}x";
    private string StringPrecoMultiplicador => $"Preço: {PrecoMultiplicador} coins";

    private string StringMaquina => $"Máquinas: {QuantidadeMaquinas}x";
    private string StringPrecoMaquina => $"Preço: {PrecoMaquina} coins";

    private string DeveloperCode;

    private const int PrecoInicialMultiplicador = 100;
    private const int PrecoInicialMaquina = 1024;

    private Timer? TimerGanho = null;

    protected override async Task OnInitializedAsync()
    {
        TimerGanho = new Timer(UpdateCoinsLoop, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
        await base.OnInitializedAsync();
    }

    private void UpdateCoinsLoop(object? state)
    {
        if (CountPontuacaoPassiva == 0)
            return;

        CoinsBalance += CountPontuacaoPassiva;
        InvokeAsync(StateHasChanged);
    }

    public void OnClickCheese()
    {
        CoinsBalance += 1 * MultiplicadorClicks;
        VerificaUpgrades();
    }

    public void VerificaUpgrades()
    {
        if (CoinsBalance > PrecoInicialMultiplicador)
        {
            HabilitaUpgradeClick = true;
        }

        if (CoinsBalance > PrecoInicialMaquina)
        {
            HabilitaComprarMaquina = true;
        }
    }

    public void UpgradeClick()
    {
        CoinsBalance -= PrecoMultiplicador;
        PrecoMultiplicador *= MultiplicadorClicks;
        MultiplicadorClicks++;
    }

    public void ComprarMaquinaClick()
    {
        CoinsBalance -= PrecoMaquina;
        PrecoMaquina *= 1.10m;
        QuantidadeMaquinas++;
        CountPontuacaoPassiva += GanhoPassivoMaquina;
    }

    public void ValidateDeveloperCode()
    {
        if (DevelopersConstants.GetDeveloperCodes().Any(a => a == DeveloperCode))
            CoinsBalance = 999999;

    StateHasChanged();
    }
}
