@page "/"

@using Clickxys.Models

@using static Clickxys.Models.Utils.GameConstans
@using static Clickxys.Models.Utils.CurrencyToStringConverter

@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div>
    <h1>Bem vindo ao Clickxys</h1>
    <label>Clique para a vitória</label>
</div>

<div>
    <MudTextField T="string" @bind-Value=@DeveloperCode Placeholder="Insert developer code" OnBlur="@ValidateDeveloperCode"></MudTextField>
</div>

<div class="divCoins">
    <label>@CurrencyToString(Currency.CurrentBalance) Cheeses</label>
</div>
<div class="divCheese" @onclick=@OnClickCheese>
    <MudImage Src="./images/cheese.png" Height="250" Width="250"></MudImage>
</div>

<div class="divUpgradeButtons">
    @if (HabilitaUpgradeClick)
    {
        <div>
            <MudButton @onclick=@UpgradeClick Disabled=@(Currency.CurrentBalance < ClickInfo.Price)>Increase Multiplier | @CurrencyToString(ClickInfo.Price)</MudButton>
            <label>@($"Multiplicador Atual: {ClickInfo.Level}x")</label>
        </div>
    }
    @if (HabilitaComprarMaquina)
    {
        <div>
            <MudButton @onclick=@ComprarMaquinaClick Disabled=@(Currency.CurrentBalance < MachineInfo.Price)>Buy Machine | @CurrencyToString(MachineInfo.Price)</MudButton>
            <label>@MachineInfo.Level</label>
        </div>
    }
</div>

@code {

    public bool HabilitaUpgradeClick = false;
    public bool HabilitaComprarMaquina = false;

    private string DeveloperCode;

    private Timer? TimerGanho = null;

    public Player Player { get; set; } = new();
    public CurrencyInfo Currency { get; set; }
    public MachineInfo MachineInfo { get; set; }
    public ClickInfo ClickInfo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Currency = Player.Currency;
        MachineInfo = Player.Machines;
        ClickInfo = Player.ClickInfo;

        TimerGanho = new Timer(UpdateCoinsLoop, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
        await base.OnInitializedAsync();
    }

    private void UpdateCoinsLoop(object? state)
    {
        if (Currency.PassiveIncome == 0)
            return;

        Currency.CurrentBalance += Currency.PassiveIncome;
        InvokeAsync(StateHasChanged);
    }

    public void OnClickCheese()
    {
        Currency.CurrentBalance += 1 * ClickInfo.Level;
        VerifyUpgrades();
    }

    public void VerifyUpgrades()
    {
        if (Currency.CurrentBalance > ClickInfo.InitialPrice)
        {
            HabilitaUpgradeClick = true;
        }

        if (Currency.CurrentBalance > MachineInfo.InitialPrice)
        {
            HabilitaComprarMaquina = true;
        }
    }

    public void UpgradeClick()
    {
        Currency.DecreaseBalance(ClickInfo.Price);
        ClickInfo.IncreaseLevel();
        ClickInfo.UpdatePrice();
    }

    public void ComprarMaquinaClick()
    {
        Currency.DecreaseBalance(MachineInfo.Price);
        MachineInfo.IncreaseLevel(); 
        MachineInfo.UpdatePrice();
        Currency.IncreasePassiveIncome(MachineInfo.CurrentIncome);
    }

    public void ValidateDeveloperCode()
    {
        if (DevelopersConstants.GetDeveloperCodes().Any(a => a == DeveloperCode))
            Currency.SetBalance(999999);

        StateHasChanged();
    }
}
